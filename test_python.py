"""
filter, map, sorted, а также для функций из библиотеки math: pi, sqrt, pow, hypot
"""

def test_filter():
    # фильтр списка по 3 буквам
    mixed = ['простокваша', 'просо', 'мак', 'профессор', 'прогулка', 'шалаш', 'леприкон']
    assert list(filter(lambda x: 'про' in x, mixed)) == ['простокваша', 'просо', 'профессор', 'прогулка']

    # фильтр на четность
    #numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    #assert list(filter(lambda x: x % 2 == 0, numbers)) == [2, 4, 6, 8, 10]

def test_map():
    # тест на перевод из строки в число
    old_list = ['1', '2', '3', '4', '5']
    assert list(map(int, old_list)) == [1, 2, 3, 4, 5]

    # тест на арифметику
    mile_distances = [1.0, 6.5, 17.4, 2.4, 9]
    assert list(map(lambda x: x * 1.6, mile_distances)) == [1.6, 10.4, 27.84, 3.84, 14.4]

def test_sorted():
    # сортировка строки
    test_str = 'Университет Искусственного Интелекта'
    assert sorted(test_str) == [' ', ' ', 'И', 'И', 'У', 'а', 'в', 'в',
                                'г', 'е', 'е', 'е', 'е', 'е', 'и', 'и',
                                'к', 'к', 'л', 'н', 'н', 'н', 'н', 'о',
                                'о', 'р', 'с', 'с', 'с', 'с', 'т', 'т',
                                'т', 'т', 'т', 'у']
    # сортировка спика
    test_list = [1, 4, 6, 4, 3, 7, 9]
    assert sorted(test_list) == [1, 3, 4, 4, 6, 7, 9]

    # сортировка словаря
    max_speed = {'Гепард': 120, 'Собака': 65, 'Кошка': 20, 'Лошадь': 65, 'Волк': 65, 'Антилопа': 100}
    assert sorted(max_speed) == ['Антилопа', 'Волк', 'Гепард', 'Кошка', 'Лошадь', 'Собака']

import math

def test_pi():
    assert round(math.pi,5) == 3.14159

def test_sqrt():
    # проверка целочисленного квадратного корня
    assert math.sqrt(121) == 11

    #проверка дробного квадратного корня
    assert round(math.sqrt(98),5) == 9.89949

def test_pow():
    # возведение в целую степень
    assert math.pow(3, 5) == 243.0
    # возведение в дробную степень
    assert round(math.pow(5,2.5), 5) == 55.9017
    # извлечение квадратного корня через степень
    assert math.pow(16, 0.5) == 4.0

def test_hypot():
    # проверка гипотенузы для теугольника 3, 4, 5:
    assert math.hypot(3, 4) == 5
    # проверка гипотенузы для произвольного теугольника:
    assert round(math.hypot(10, 14), 5) ==  17.20465